name: SQLBuddy CI/CD

on:
  push:
    branches: [ main, master, develop, 'release/*', 'hotfix/*', 'feature/*' ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master, develop, 'release/*' ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23', '1.24']

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          go mod download
          sudo apt update
          sudo apt install make -y

      - name: Run tests with coverage
        run: make coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Check out code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install make -y
          go mod download
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: make lint

  release-candidate:
    name: Build Release Candidate
    if: startsWith(github.ref, 'refs/heads/release/')
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Extract release version
        id: extract_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          VERSION=${BRANCH_NAME#release/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Run GoReleaser for pre-release
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --clean --config .goreleaser.prerelease.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE_VERSION: ${{ steps.extract_version.outputs.VERSION }}-rc

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    needs: [test, lint]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: echo "All jobs completed successfully!"

      - name: Notify failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: echo "One or more jobs failed"